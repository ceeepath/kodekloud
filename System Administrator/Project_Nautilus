#Task1: Create a Linux User with non-interactive shell in app server 2
sudo adduser --shell /bin/false userName
=======================================================================================================================================================================
#Task2: Please give everyone executable permissions to /tmp/xfusioncorp.sh script on App Server 3
sudo chmod 555 /path/to/file.sh
=======================================================================================================================================================================
#Task3: Linux TimeZones Setting
sudo timedatectl set-timezone America/New_York
=======================================================================================================================================================================
#Task4: Set banner / motd
Paste the message into /etc/issue, /etc/issue.net for banner then /etc/motd for motd.
=======================================================================================================================================================================
#Task5: Install and configure NTP server on App Server 1. Add NTP server 3.europe.pool.ntp.org in NTP configuration on App Server 1.
sudo yum install ntp -y
#Edit the configuration files
vi /etc/ntp.conf
# Add the required NTP server to the list
server 3.europe.pool.ntp.org iburst
=======================================================================================================================================================================
#Task6: Configure passwordless ssh authentication from jump server to other servers on the network
#Create ssh key on the jump server
ssh-keygen
#Copy key to remote servers
ssh-copy-id remoteuser@ipaddress
=======================================================================================================================================================================
#Task7: Install SElinux package on server
#Update yum package first
sudo yum update
#Install the selinux dependencies
sudo yum install policycoreutils policycoreutils-python setools setools-console setroubleshoot
#Install selinux
yum install selinux-policy selinux-policy-targeted
#Enable selinux in the /etc/selinux/config by changing SELINUX=disabled to SELINUX=enforcing
#Reboot server to complete status
#Check selinux status with;
sudo sestatus
=======================================================================================================================================================================
#Task8: Install cronie and setup cron job with root user
#Update yum package
sudo yum update -y
#Instal Cronie
sudo yum install cronie -y
#Start crond service
sudo systemctl start crond
#Enable crond to always start on reboot
sudo systemctl enable crond
#Switch to root user
sudo -i
#Edit cron table and paste cron job command
crontab -e
=======================================================================================================================================================================
#Task9: Replace all occurances of the string Sample to Maritime on the XML file /root/nautilus.xml located in the backup server.
#We can use the "sed" command  which is a cli utility for manipulating texts to do this search and replace
sed -i 's/Sample/Maritime/g' your_xml_file.xml
#"-i" tells sed to edit the file in place, i.e., modify the file itself instead of just printing the modified text to the console.
#"'s/Sample/Maritime/g'" is the sed command that tells sed to replace all occurrences of "Sample" with "Maritime".
#The "s" at the beginning indicates that sed should substitute text, and the "g" at the end tells sed to replace all occurrences of the pattern, not just the first one.
=======================================================================================================================================================================
#Task10: Copy /tmp/nautilus.txt.gpg file from jump server to App Server 1 at location /home/code
#We can use the scp command:
scp /tmp/nautilus.txt.gpg tony@172.16.238.10:/home/code/nautilus.txt.gpg
=======================================================================================================================================================================
#Task11: Create a user named siva in App Server 3 without a home directory.
sudo adduser -r siva
=======================================================================================================================================================================
#Task12: change the default runlevel so that they can boot in GUI (graphical user interface) by default.
#If run levels are in use then edit the /etc/inittab file
sudo vi /etc/inittab
#Edit the line that starts with "id:3:initdefault:" and change the "3" to "5", so it looks like this: id:5:initdefault:
#If target is being used instead of run levels run the command;
sudo systemctl set-default graphical.target
#To change back to multi-user;
sudo systemctl set-default multi-user.target
#To check current status;
systemctl get-default
#Remember to reboot for changes to take effect.
=======================================================================================================================================================================
#Task13:create a user named ravi on the App Server 1. Set expiry date to 2021-02-17 in Stratos Datacenter
sudo useradd -e 2021-02-17 ravi
=======================================================================================================================================================================
#Task14: Copy out all the files owned by a particular user from a directory and its sub directories without altering the directory structrue into another directory.
find /path/to/directory -user username -type f -exec cp --parents {} /directory/to/copy/to \;
#To check for correctness, count number of files owned by that user in the default directory and count in the new directory as well.
find /path/to/directory -user username -type f | wc -l #-type f specifies that only regular files should be selected, excluding directories.
#-exec cp --parents {} /directory/to/copy/to \; copies each file to the /directory/to/copy/to directory while preserving the directory structure.
#The {} is a placeholder for the filename found by find, and the --parents option preserves the directory structure of the file being copied.
=======================================================================================================================================================================
#Task15:mariadb service is down on the database server
#Check logs for details of issue
journalctl -xe | grep mariadb
#logs shows issue with file ownership and permission issues of /var/lib/mysql file
#change file ownership and group to mysql user
sudo chown -R mysql:mysql /var/lib/mysql
#Now start the mariadb.service service
sudo systemctl start mariadb.service
#Check status to confirm functionality
sudo systemctl status mariadb
=======================================================================================================================================================================
#Task16:On Nautilus App Server 3, alter the /home/BSD.txt file as per details given below:
#a. Delete all lines containing word following and save results in /home/BSD_DELETE.txt file. (Please be aware of case sensitivity)
#b. Replace all occurrence of word or to them and save results in /home/BSD_REPLACE.txt file.
#a)First, create a new file BSD_DELETE.txt. We can just copy from the original BSD file.
cp BSD.txt BSD_DELETE.txt
#Use the sed command to search for the word "following" and delete every line that has it.
sed -i '/following/d' BSD_DELETE.txt
#b)We can also use the sed command for this
sed 's/\bor\b/them/g' BSD.txt > /home/BSD_REPLACE.txt
#The s/ instructs the command to substitute and \b is for setting a boundary on the word "or" so it only substitute a standalone "or" not an "or" in another word.
#/g instructs the command to replace all occurence and not only one occurence.
=======================================================================================================================================================================
#Task17:They have a mail server in Stork DC where they are using postfix mail transfer agent. Postfix service seems to fail.
#Try to identify the root cause and fix it.
--------------------------------------------------
#Solution
#First check the postfix configuration syntax file for any error
sudo postfix check
#I got these two errors
#1)postfix: warning: /etc/postfix/main.cf, line 135: overriding earlier entry: inet_interfaces=all
#2)postfix: fatal: parameter inet_interfaces: no local interface found for ::1
#For one, the error message is a warning that the "inet_interfaces" parameter has been defined more than once in the main.cf file and we need to remove
#the duplicate entry by editing the /etc/postfix/main.cf file.
vi /etc/postfix/main.cf file
#search for inet_interfaces and delete the duplicate entry leaving the one with inet_interfaces = localhost
#Then under # Enable IPv4, and IPv6 if supported, set inet_protocols = ipv4
#save file and restart service
sudo systemctl restart postfix
=======================================================================================================================================================================
#Task18:  App Server 2 in Stratos Datacenter is having some DNS resolution issues, so we want to add some additional DNS nameservers on this server.
#As a temporary fix we have decided to go with Google public DNS (ipv4). Please make appropriate changes on this server.
-------------------------------------------------------------------------------------------------------------------------------
#Edit the /etc/resolv.conf file and add the google DNS
sudo vi /etc/resolv.conf
#Then add; nameserver   8.8.8.8
#Save and close
=======================================================================================================================================================================
#Task19:Setup a collaborative directory /sysadmin/data on Nautilus App 3 server in Stratos Datacenter.
#The directory should be group owned by the group sysadmin and the group should own the files inside the directory.
#The directory should be read/write/execute to the group owners, and others should not have any access.
------------------------------------------------------------------------------------------------------------------------
#Use sudo access to make the directory and give it Read, Write and Executable permission for owner and group.
sudo mkdir -m 770 /sysadmin/data
#Change the group ownership of the directory and sub-directories to sysadmin 
chown -R :sysadmin /sysadmin/data
=======================================================================================================================================================================
#Task20:Disable direct SSH root login on all app servers in Stratos Datacenter
#Search for #PermitRootLogin in /etc/ssh/sshd_config, uncomment it and change the permission from "yes" to "no"
sudo vi /etc/ssh/sshd_config
#Restart the sshd_config
sudo systemctl restart sshd
=======================================================================================================================================================================
#Task21:a. Install postfix package on all the application servers.
#b. Once installed, make sure it is enabled to start during boot.
-----------------------------------------------------------------------
#!/bin/bash
read -sp 'Enter your password: ' PASSWORD
echo $PASSWORD | sudo -S yum update -y
echo $PASSWORD | sudo -S yum install postfix -y
sleep 30
echo $PASSWORD | sudo -S sed -i 's/inet_protocols = all/inet_protocols = ipv4/g' /etc/postfix/main.cf
echo $PASSWORD | sudo -S systemctl start postfix
echo $PASSWORD | sudo -S systemctl enable postfix
echo $PASSWORD | sudo -S systemctl status postfix
=======================================================================================================================================================================
#Task22:On storage server in Stratos Datacenter we have private and public keys stored /home/*_key.asc. Use those keys to perform the following actions.
#Encrypt /home/encrypt_me.txt to /home/encrypted_me.asc.
#Decrypt /home/decrypt_me.asc to /home/decrypted_me.txt. (Passphrase for decryption and encryption is kodekloud).
-----------------------------------------------------------------------------------------------------------------------
#Seeing that the files to use belong to root user then it is advisable to switch to root user first.
sudo -i
#We can now create a key id and import it for the recipient
cd /home
gpg --import private_key.asc; gpg --import public_key.asc #This creates a key id for the recipient
#we can view the imported keys using;
gpg --list-keys
#use the created key to encrypt the file
gpg --encrypt --recipient "kodekloud@kodekloud.com" --output encrypted_me.asc encrypt_me.txt
#To decrypt the file
gpg --output decrypted_me.txt --decrypt decrypt_me.asc
#enter passphrase
=======================================================================================================================================================================
#Task23:Install httpd package on App Server 1 using yum and configure it to run on 6400 port, make sure to start its service.
#Create an index.html file under Apache's default document root i.e /var/www/html and add below given content in it.: Welcome to the xFusionCorp Industries!
#Configure Apache to enable below mentioned headers:
#X-XSS-Protection header with value 1; mode=block
#X-Frame-Options header with value SAMEORIGIN
#X-Content-Type-Options header with value nosniff
#Note: You can test using curl on the given app server as LBR URL will not work for this task.
--------------------------------------------------------------------------------------------------------------------------
#Install httpd and configure port using this script
#!/bin/bash
read -sp 'Enter your password: ' PASSWORD
echo $PASSWORD | sudo -S yum update -y
echo $PASSWORD | sudo -S yum install httpd -y
sleep 20
echo $PASSWORD | sudo sed -i 's/^Listen 80$/Listen 6400/' /etc/httpd/conf/httpd.conf
echo $PASSWORD | sudo -S systemctl start httpd
echo $PASSWORD | sudo -S systemctl enable httpd
echo $PASSWORD | sudo -S systemctl status httpd
#To add the content into /var/www/html/index.html, create an index.html file in the path /var/www/html/
sudo touch /var/www/html/index.html
#Paste the content into it.
<!DOCTYPE html>
<html>
<head>
	<title>Welcome to the xFusionCorp Industries!</title>
</head>
<body>
	<h1>Welcome to the xFusionCorp Industries!</h1>
</body>
</html>
#To configure Apache to mention the headers, vi into /etc/httpd/conf/httpd.conf and search for the section with "<Directory "/var/www/html">"
#Input the details in that section and save
Header set X-XSS-Protection "1; mode=block"
Header set X-Frame-Options "SAMEORIGIN"
Header set X-Content-Type-Options "nosniff"
#Restart httpd service then run curl -v localhost:port to verify result.
=======================================================================================================================================================================
#Task24:a. In all app servers install haproxy package.
#b. Using logrotate configure haproxy logs rotation to monthly and keep only 3 rotated logs.
-------------------------------------------------------------------------------------------------
#To install haproxy, we can use script;
#!/bin/bash
read -sp 'Enter your password: ' PASSWORD
echo $PASSWORD | sudo -S yum update -y
echo $PASSWORD | sudo -S yum install haproxy -y
#To configure haproxy with logrotate as required, edit /etc/logrotate.d/haproxy and input the required parameter.
sudo vi /etc/logrotate.d/haproxy
#change daily to monthly and change rotate from the default 10 to 3. Save and exit.
=======================================================================================================================================================================
#Task25:Please configure a local yum repository on Nautilus Backup Server as per details given below.
#a. We have some packages already present at location /packages/downloaded_rpms/ on Nautilus Backup Server.
#b. Create a yum repo named epel_local and make sure to set Repository ID to epel_local. Configure it to use package's location /packages/downloaded_rpms/.
#c. Install package samba from this newly created repo.
------------------------------------------------------------------------------------------------------------------------------------------------------------
#We are supposed to install createrepo but i noticed it has already been installed. So we would just go ahead to create a metadata for the yum repo.
sudo createrepo /packages/downloaded_rpms/
#We then have to Create a repository configuration file named epel_local.repo in the /etc/yum.repos.d/
sudo vi /etc/yum.repos.d/epel_local.repo
#Paste the following content in it
[epel_local]
name=Local Yum Repo
baseurl=file:///packages/downloaded_rpms/
enabled=1
gpgcheck=0
#Save and close.
#We can now install samba with yum.
sudo yum install samba -y
=======================================================================================================================================================================
#Task26:httpd is already installed on app server 2. Configure Apache to listen on port 3001. Configure Apache to add some redirects as mentioned below:
#a.) Redirect http://stapp02.stratos.xfusioncorp.com:<Port>/ to http://www.stapp02.stratos.xfusioncorp.com:<Port>/ i.e non www to www. This must be a permanent redirect i.e 301
#b.) Redirect http://www.stapp02.stratos.xfusioncorp.com:<Port>/blog/ to http://www.stapp02.stratos.xfusioncorp.com:<Port>/news/. This must be a temporary redirect i.e 302.
----------------------------------------------
#We need to edit the apache configuration file in /etc/httpd/conf/httpd.conf
sudo vi /etc/httpd/conf/httpd.conf
#Edit the Listen 8080 line to Listen 3001
#Write the VirtualHost block to redirect the sites as required after the last line of the configuration file.
<VirtualHost *:3001>
    ServerName stapp02.stratos.xfusioncorp.com
    Redirect 301 / http://www.stapp02.stratos.xfusioncorp.com:3001/
</VirtualHost>

<VirtualHost *:3001>
    ServerName www.stapp02.stratos.xfusioncorp.com
    Redirect 302 /blog/ http://www.stapp02.stratos.xfusioncorp.com:3001/news/
</VirtualHost>
#Save and restart apache service
sudo systemctl restart httpd
=======================================================================================================================================================================
#Task27:We have a backup management application UI hosted on Nautilus's backup server in Stratos DC. That backup management application code is deployed under Apache
#on the backup server itself, and Nginx is running as a reverse proxy on the same server. Apache and Nginx ports are 8085 and 8097, respectively.
#We have iptables firewall installed on this server. Make the appropriate changes to fulfill the requirements mentioned below:
#We want to open all incoming connections to Nginx's port and block all incoming connections to Apache's port. Also make sure rules are permanent.
--------------------------------------------------------------------------------------------------------------------------------------------------------
#To allow incoming connections to Nginx port and block all incoming to Apache port;
iptables -A INPUT -p tcp --dport 8097 -j ACCEPT;iptables -A INPUT -p tcp --dport 8085 -j DROP
#Save the configuration
service iptables save
#Restart Iptable service to apply the rules
systemctl restart iptables
#You can confirm the rules we just added using;
iptables -L -n
=======================================================================================================================================================================
#Task28:Install and configure nginx on App Server 3. On App Server 3 there is a self signed SSL certificate and key present at location /tmp/nautilus.crt and /tmp/nautilus.key.
#Move them to some appropriate location and deploy the same in Nginx. Create an index.html file with content Welcome! under Nginx document root.
#For final testing try to access the App Server 3 link (either hostname or IP) from jump host using curl command. For example curl -Ik https://<app-server-ip>/.
------------------------------------------------------------------------------------------------------
#Install nginx
sudo yum install epel-release -y
sudo yum install nginx -y
#Move certificates to appropriate location
sudo mkdir -p /etc/nginx/ssl
sudo mv /tmp/nautilus.crt /etc/nginx/ssl/
sudo mv /tmp/nautilus.key /etc/nginx/ssl/
#Configure nginx.
sudo vi /etc/nginx/nginx.conf
#Uncomment the https section and edit the certificate and key lines to the correct location we copied them to.
ssl_certificate /etc/nginx/ssl/nautilus.crt;
ssl_certificate_key /etc/nginx/ssl/nautilus.key;
#Also add this inside that block. 
location / {
        root /usr/share/nginx/html;
        index index.html;
    }
#Navigate to /usr/share/nginx/html and delete the index.html symbolic link then create a new index.html and add "Welcome!"
cd /usr/share/nginx/html
rm -f index.html
echo "Welcome!" > index.html
#Save the file and restart nginx
sudo systemctl restart nginx
=======================================================================================================================================================================
#Task29:create a bash script named beta_backup.sh which should accomplish the following tasks. (Also remember to place the script under /scripts directory on App Server 2)
#a. Create a zip archive named xfusioncorp_beta.zip of /var/www/html/beta directory.
#b. Save the archive in /backup/ on App Server 2. This is a temporary storage, as backups from this location will be clean on weekly basis. Therefore, we also need to save this backup archive on Nautilus Backup Server.
#c. Copy the created archive to Nautilus Backup Server server in /backup/ location.
#d. Please make sure script won't ask for password while copying the archive file. Additionally, the respective server user (for example, tony in case of App Server 1) must be able to run it.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#First, set up passwordless ssh connection between the App server and the Backup server. Refer to Task6
#Use the script below for the remaining process.
#!/bin/bash
# Specify the source directory
source_dir="/var/www/html/beta"
# Specify the destination directory
backup_dir="/backup"
# Specify the backup filename
backup_file="$backup_dir/xfusioncorp_beta.zip"
# Create the zip archive
zip -r "$backup_file" "$source_dir"
# Check if the zip archive was created successfully
if [ $? -eq 0 ]; then
  echo "Backup created successfully: $backup_file"
else
  echo "Failed to create backup."
  exit 1
fi
# Specify the remote server details
remote_user="clint"
remote_server="172.16.238.16"
remote_dir="/backup"
# Copy the backup file to the remote server using scp
scp "$backup_file" "$remote_user@$remote_server:$remote_dir"
# Check if the scp command was successful
if [ $? -eq 0 ]; then
  echo "Backup file copied to $remote_server:$remote_dir"
else
  echo "Failed to copy backup file."
fi
=======================================================================================================================================================================
#Task30:a. On App Server 2 at location /var/www/html/ecommerce find out all files (not directories) having .php extension.
#b. Copy all those files along with their parent directory structure to location /ecommerce on same server.
#c. Please make sure not to copy the entire /var/www/html/ecommerce directory content.
-------------------------------------------------------------------------------------------------------------------------------
#First, we can check how many of those files exist in the /var/www/html/ecommerce directory. This is not necessary though.
find /var/www/html/ecommerce -type f -name "*.php" | wc -l
#Copy the files with extension .php
sudo find /var/www/html/ecommerce -type f -name "*.php" -exec cp --parents {} /ecommerce \;
#Verify that the correct number of files was copied
find /ecommerce -type f -name "*.php" | wc -l
=======================================================================================================================================================================
#Task31:Install the telnet package on all app-servers
sudo yum install telnet -y
=======================================================================================================================================================================
#Task32:

=======================================================================================================================================================================
#Task33:

=======================================================================================================================================================================
#Task34:

=======================================================================================================================================================================
#Task35:

=======================================================================================================================================================================
#Task36:

=======================================================================================================================================================================
#Task37:

=======================================================================================================================================================================

