#Task1:a. Install git, set up any values for user.email and user.name globally and create a bare repository /opt/demo.git.
#b. There is an update hook (to block direct pushes to master branch) under /tmp on storage server itself; use the same to block direct pushes to master branch in /opt/demo.git repo.
#c. Clone /opt/demo.git repo in /usr/src/kodekloudrepos/demo directory. #d. Create a new branch xfusioncorp_demo in repo that you cloned in /usr/src/kodekloudrepos.
#e. There is a readme.md file in /tmp on storage server itself; copy that to repo, add/commit in the new branch you created, and finally push your branch to origin.
#f. Also create master branch from your branch and remember you should not be able to push to master as per hook you have set up.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Install git and carry out initial configurations using this script
#!/bin/bash
PASS=Bl@kW
#Install git
echo $PASS | sudo -S yum install git -y
#Configure global credentials
git config --global user.email "ceeepath@gmial.com"
git config --global user.name "Adekunle"
#Create directory and set ownership to natasha i.e. current user
echo $PASS | sudo -S mkdir /opt/demo.git
echo $PASS | sudo -S chown -R natasha:natasha /opt/demo.git
cd /opt/demo.git
#Initialize the directory as a bare repo as required
git init --bare
sleep 5
#Copy the update file that contains script that will be used to block direct pushes to master branch
cp /tmp/update /opt/demo.git/hooks/update
#Set directory ownership to natasha i.e. current user
echo $PASS | sudo -S chown -R natasha:natasha /usr/src/kodekloudrepos
cd /usr/src/kodekloudrepos
#Clone into directory
git clone /opt/demo.git
cd /usr/src/kodekloudrepos/demo
#Create and switch to new branch
git checkout -b xfusioncorp_demo
cp /tmp/readme.md .
#Add and commit latest activity
git add .
git commit -m "copied readme.md file from /tmp"
git push origin xfusioncorp_demo
#Create and switch to master branch
git checkout -b master
#Confirm that you are unable to push to master branch
git push origin master
=======================================================================================================================================================================================================
#Task2:a. Pull busybox:musl image on App Server 1 in Stratos DC and re-tag (create new tag) this image as busybox:media.
------------------------------------------------
#I noticed that you have to use elevated permission for each command.
#To pull the image
sudo docker pull busybox:musl
#To re-tag the image
sudo docker tag busybox:musl busybox:media
=======================================================================================================================================================================================================
#Task3:Create a puppet programming file official.pp under /etc/puppetlabs/code/environments/production/manifests directory on puppet master node i.e on Jump Server.
#Define a class mysql_database in puppet programming code and perform below mentioned tasks:
#Install package mariadb-server (whichever version is available by default in yum repo) on puppet agent node i.e on DB Server also start its service.
#Create a database kodekloud_db2 , a database userkodekloud_sam and set passwordB4zNgHA7Ya for this new user also remember host should be localhost.
#Finally grant some usual permissions like select, update (or full) ect to this newly created user on newly created database.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
#In this task, the jump server serves as the puppet master while the dbserver is a puppet agent. On the puppet master server, create the official.pp file first
sudo touch /etc/puppetlabs/code/environments/production/manifests/official.pp #The file name is different for different questions.
#Paste the puppet code to carry out the task inside the file and save. The code can be found in: https://github.com/DevopGroupstudy/Kodekloud_engineer_related_tasks/blob/main/mariadb.pp
#Go through the manifest and change question specifics like database name, username and password.
#Now go to the puppet agent and run;
sudo puppet agent -t
#The manifest should run on the agent and carry out the task.
=======================================================================================================================================================================================================
#Task4:a. On App Server 1 save the image news:xfusion in an archive. b. Transfer the image archive to App Server 3.
#c. Load that image archive on App Server 3 with same name and tag which was used on App Server 1.
----------------------------------------------------------------------------------------------------------------------
#To save the image as an archive;
docker save news:xfusion -o news_xfusion.tar
#Transfer it to App Server 3 using scp
scp news_xfusion.tar banner@172.16.238.12:/home/banner
#Load the archived image in App Server 3
docker load -i news_xfusion.tar
=======================================================================================================================================================================================================
#Task5:Write a playbook.yml under /home/thor/ansible directory on jump host, an inventory file is already present under /home/thor/ansible directory on jump host itself.
#Using this playbook accomplish below given tasks: Create an empty file /opt/devops/blog.txt on app server 1; its user owner and group owner should be tony.
#Create a symbolic link of source path /opt/devops to destination /var/www/html.
#Create an empty file /opt/devops/story.txt on app server 2; its user owner and group owner should be steve. Create a symbolic link of source path /opt/devops to destination /var/www/html.
#Create an empty file /opt/devops/media.txt on app server 3; its user owner and group owner should be banner. Create a symbolic link of source path /opt/devops to destination /var/www/html.
---------------------------------------------------------------------------------------------------
#enter into the /home/thor/ansible directory
cd ansible
#create the ansible-playbook for the task
vi playbook.yml
#paste the manifest into it. see link to manifest: https://github.com/DevopGroupstudy/Kodekloud_engineer_related_tasks/blob/main/ansible_file_%26_symbolic_link
#run the manifest
ansible-playbook -i inventory playbook.yml
=======================================================================================================================================================================================================
#Task6:On jump host make appropriate changes so that Ansible can use anita as a default ssh user for all hosts. 
#Make changes in Ansible's default configuration only â€”please do not try to create a new config.
---------------------------------------------------------------------------------------------------
#vi into the ansible configuration file
sudo vi /etc/ansible/ansible.cfg
#search for remote_user, uncomment it if it is commented and make it equal to anita.
remote_user = anita
=======================================================================================================================================================================================================
#Task7:a. Create an inventory file ~/playbook/inventory on jump host and add all app servers in it. b. Create a playbook ~/playbook/playbook.yml to create a blank file /tmp/nfsdata.txt on all app servers.
#c. The /tmp/nfsdata.txt file permission must be 0644. d. The user/group owner of file /tmp/nfsdata.txt must be tony on app server 1, steve on app server 2 and banner on app server 3.
----------------------------------------------------------------------------------------------------------------------------
#cd into playbook folder and create the inventory file.
vi inventory
#paste the following in it and save.
[all]
stapp01 ansible_user=tony ansible_password=Ir0nM@n
stapp02 ansible_user=steve ansible_password=Am3ric@
stapp03 ansible_user=banner ansible_password=BigGr33n
#vi into playbook.yml to create the playbook for creating the blank file. Paste the playbook manifest in this link to it and save: https://github.com/DevopGroupstudy/Kodekloud_engineer_related_tasks/blob/main/ansible_create_file_%26_set_ownership
#run playbook
ansible-playbook -i inventory playbook.yml
=======================================================================================================================================================================================================
#Task8:Create a puppet programming file demo.pp under /etc/puppetlabs/code/environments/production/manifests directory on puppet master node i.e on Jump Server.
#Within the programming file define a custom class ntpconfig to install and configure ntp server on app server 1.
#Add NTP Server server 1.south-america.pool.ntp.org in default configuration file on app server 1, also remember to use iburst option for faster synchronization at startup.
---------------------------------------------------------------------------------------------------
#vi into /etc/puppetlabs/code/environments/production/manifests/demo.pp using [sudo vi /etc/puppetlabs/code/environments/production/manifests/demo.pp]
#paste the following into it. Note the configuration lines in the exec section and edit to your own task specification.
---
class ntpconfig {
  package { 'ntp':
    ensure => installed,
  }

  file { '/etc/ntp.conf':
    ensure => present,
    owner  => 'root',
    group  => 'root',
    mode   => '0644',
  }

  exec { 'add_ntp_server':
    command     => "/bin/sed -i '/^# Please consider joining the pool (http:\/\/www\.pool\.ntp\.org\/join\.html)\./a server 1.south-america.pool.ntp.org iburst' /etc/ntp.conf",
    unless      => "/bin/grep -q '^server 1.south-america.pool.ntp.org iburst$' /etc/ntp.conf",
    require     => Package['ntp'],
  }
}

include ntpconfig
---
#Save the file then ssh to the agent server and run [sudo puppet agent -t]
=======================================================================================================================================================================================================
#Task9:There is a pod named webserver and the container under it is named as nginx-container. It is using image nginx:latest.
There is a sidecar container as well named sidecar-container which is using ubuntu:latest image.Look into the issue and fix it, make sure pod is in running state and you are able to access the app.
--------------------------------------------------------------------------------------
#Check the pod name
kubectl get pod
#Check the log for the pod
kubectl logs {podname}
#In my case i noticed the pod is having issues pulling the nginx image.
#Edit the pod to see issues with the image
kubectl edit pod {podname}
#I noticed a typo in the image name, instead of 'latest' it was written as 'latests', so i corrected it and saved and after a while, the pod went to running state. 
=======================================================================================================================================================================================================
#Task10:There is already an inventory file ~/playbooks/inventory on jump host.
#On jump host itself there is a list of users in ~/playbooks/data/users.yml file and there are two groups â€” admins and developers â€”that have list of different users.
#Create a playbook ~/playbooks/add_users.yml on jump host to perform the following tasks on app server 2 in Stratos DC.
#a. Add all users given in the users.yml file on app server 2. b. Also add developers and admins groups on the same server.
#c. As per the list given in the users.yml file, make each user member of the respective group they are listed under.
#d. Make sure home directory for all of the users under developers group is /var/www (not the default i.e /var/www/{USER}).
#Users under admins group should use the default home directory (i.e /home/devid for user devid).
#e. Set password 8FmzjvFU6S for all of the users under developers group and Rc5C9EyvbU for of the users under admins group.
#Make sure to use the password given in the ~/playbooks/secrets/vault.txt file as Ansible vault password to encrypt the original password strings.
#You can use ~/playbooks/secrets/vault.txt file as a vault secret file while running the playbook (make necessary changes in ~/playbooks/ansible.cfg file).
#f. All users under admins group must be added as sudo users. To do so, simply make them member of the wheel group as well.
#Note: Validation will try to run the playbook using command ansible-playbook -i inventory add_users.yml so please make sure playbook works this way, without passing any extra arguments.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#make sure to cd inside the playbooks directory before carrying out any of this step.
#The ansible playbook to execute the task above can be found here: https://github.com/DevopGroupstudy/Kodekloud_engineer_related_tasks/blob/main/add_users_%26_groups
#Copy the playbook, vi into add_users.yml and paste the playbook. Edit the host details and sudo password if necessary. The current playbook was created for stapp01.
#Before running the playbook, there are lists of steps to accomplish.
#Add the path to the ansible-vault to the ansible.cfg file in the playbooks directory. vi into the ansible.cfg file and add the line below to its last line.
vault_password_file = ~/playbooks/secrets/vault.txt
#Create two files in the secrets folder for the admins and developers password
touch secrets/admins_password.yml secrets/developers_password.yml
#Hash each of the passwords and copy the output into the respective files
#For the admins password for example, replace the {passwordvalue} in the command below with the actual password from the question.
python -c "import crypt; print(crypt.crypt('passwordvalue', '\$6\$SALTsalt\$'))"
#The output should look like this: $6$SALTsalt$hKHx60a6SbDbPZd4oXF2OMB7zul33QKyBdzKc5ZWXNlq.yOvPRNFHu4NiCHd1ywWdjTBAe3J4zTpkZ9n69xap0
#Paste the output in the admins_password.yml file this way:
password: $6$SALTsalt$hKHx60a6SbDbPZd4oXF2OMB7zul33QKyBdzKc5ZWXNlq.yOvPRNFHu4NiCHd1ywWdjTBAe3J4zTpkZ9n69xap0
#Do the same for the developers password.
#Encrypt both files using the ansible vault command
ansible-vault encrypt secrets/admins_password.yml secrets/developers_password.yml
#Now run the playbook using:
ansible-playbook -i inventory add_users.yml
=======================================================================================================================================================================================================
#Task11:a. Update ~/ansible/playbook.yml playbook to run the httpd role on App Server 3.
#b. Create a jinja2 template index.html.j2 under /home/thor/ansible/role/httpd/templates/ directory and add a line This file was created using Ansible on <respective server>.
#Also please make sure not to hard code the server name inside the template. Instead, use inventory_hostname variable to fetch the correct value.
#c. Add a task inside /home/thor/ansible/role/httpd/tasks/main.yml to copy this template on App Server 3 under /var/www/html/index.html.
#Also make sure that /var/www/html/index.html file's permissions are 0777.
#d. The user/group owner of /var/www/html/index.html file must be respective sudo user of the server (for example tony in case of stapp01).
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Be sure to cd inside the ansible directory before running this task
#Edit the playbook.yml file to add the host to execute the playbook on. After editing, the file should contain:
---
- hosts: stapp03
  become: yes
  become_user: root
  roles:
    - role/httpd

#To create the Jinja2 template index.html.j2 under the /home/thor/ansible/role/httpd/templates/, vi into role/httpd/templates/index.html.j2 and paste the following content:
This file was created using Ansible on {{ inventory_hostname }}
#Save the file and go to the role/httpd/tasks/main.yml file to update it with a task to copy the index.html.j2 file to the target machine.
#The following tasks should be added to the tasks/main.yml file:

- name: Create index.html file
  template:
    src: index.html.j2
    dest: /var/www/html/index.html

- name: Set permissions and ownership for index.html file
  file:
    path: /var/www/html/index.html
    mode: '0777'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

#Save then run the playbook using: ansible-playbook -i inventory playbook.yml
=======================================================================================================================================================================================================
#Task14:
=======================================================================================================================================================================================================
#Task15:
=======================================================================================================================================================================================================
#Task16:
=======================================================================================================================================================================================================
#Task17:
